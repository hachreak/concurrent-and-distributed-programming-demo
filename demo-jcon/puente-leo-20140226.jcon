GLOBAL{
 int LEFT = 0;
 int RIGHT = 1;
 int numCochesGo[] = new int[2];
 int numCochesWait[] = new int[2];
// int direction;
 int MAXHILOS = 2;
}

TYPE {
  Process Coche {
    Semaforo otherdirection, mydirection, mutex;
    int direction, inversedirection;
   String go;
	
  public Coche(int _direction, Semaforo _mydirection, Semaforo _otherdirection, Semaforo _mutex) {
    direction = _direction;
    if(direction == GLOBAL.LEFT){
       inversedirection  = GLOBAL.RIGHT;
      go = "LEFT";
    }else{
      inversedirection = GLOBAL.LEFT;
      go = "RIGHT";
    }
    mydirection = _mydirection;
    otherdirection = _otherdirection;
    mutex = _mutex;
  }

  public void run() {
    while (true) {		
      mutex.acquire();

System.out.println("Car "+go+": LEFT [waiting ("+GLOBAL.numCochesWait[GLOBAL.LEFT]+
") -  go ("+GLOBAL.numCochesGo[GLOBAL.LEFT]+
")] RIGHT [waiting ("+GLOBAL.numCochesWait[GLOBAL.RIGHT]+
") -  go ("+GLOBAL.numCochesGo[GLOBAL.RIGHT]+")] checkin");

      // if  someone go from other direction or someone wait in other direction
      if(GLOBAL.numCochesGo[inversedirection] > 0 || GLOBAL.numCochesWait[inversedirection] > 0){

System.out.println("Car "+go+": LEFT [waiting ("+GLOBAL.numCochesWait[GLOBAL.LEFT]+
") -  go ("+GLOBAL.numCochesGo[GLOBAL.LEFT]+
")] RIGHT [waiting ("+GLOBAL.numCochesWait[GLOBAL.RIGHT]+
") -  go ("+GLOBAL.numCochesGo[GLOBAL.RIGHT]+")] wait++");

        // sign me on waiting list
        GLOBAL.numCochesWait[direction]++;
        // Free mutex
        mutex.release();
System.out.println("Release mutex, wait mydirection "+direction);
        // Just wait!
        mydirection.wait();
System.out.println("Release mydirection, wait mutex"+direction);
        // Get mutex
        mutex.acquire();
System.out.println("Acquired mutex");
        // go out from the waiting list
        GLOBAL.numCochesWait[direction]--;

System.out.println("Car "+go+": LEFT [waiting ("+GLOBAL.numCochesWait[GLOBAL.LEFT]+
") -  go ("+GLOBAL.numCochesGo[GLOBAL.LEFT]+
")] RIGHT [waiting ("+GLOBAL.numCochesWait[GLOBAL.RIGHT]+
") -  go ("+GLOBAL.numCochesGo[GLOBAL.RIGHT]+")] wait--");

      }
      // sign me on go list
      GLOBAL.numCochesGo[direction]++;

System.out.println("Car "+go+": LEFT [waiting ("+GLOBAL.numCochesWait[GLOBAL.LEFT]+
") -  go ("+GLOBAL.numCochesGo[GLOBAL.LEFT]+")] RIGHT [waiting ("+
GLOBAL.numCochesWait[GLOBAL.RIGHT]+") -  go ("+
GLOBAL.numCochesGo[GLOBAL.RIGHT]+")] go++");

      // Free mutex
      mutex.release();

      // I can pass  
      if(direction == GLOBAL.LEFT){
        System.out.println("Car pass from: LEFT..." );
      }else{
        System.out.println("Car pass from: RIGHT..." );
      }
       
      mutex.acquire();
      // I passed! I'm on the other side of the bridge...
      GLOBAL.numCochesGo[direction]--;

System.out.println("Car "+go+":LEFT [waiting ("+GLOBAL.numCochesWait[GLOBAL.LEFT]+
") -  go ("+GLOBAL.numCochesGo[GLOBAL.LEFT]+
")] RIGHT [waiting ("+GLOBAL.numCochesWait[GLOBAL.RIGHT]+
") -  go ("+GLOBAL.numCochesGo[GLOBAL.RIGHT]+")] go--");

      // Wake up a waiting car
      //if(GLOBAL.numCochesGo[direction] == 0){
      	
        if(GLOBAL.numCochesWait[inversedirection] > 0){

System.out.println("Car "+go+": [waiting ("+GLOBAL.numCochesWait[GLOBAL.LEFT]+
") -  go ("+GLOBAL.numCochesGo[GLOBAL.LEFT]+
")] RIGHT [waiting ("+GLOBAL.numCochesWait[GLOBAL.RIGHT]+
") -  go ("+GLOBAL.numCochesGo[GLOBAL.RIGHT]+")] release other direction");

          // change direction
          otherdirection.release();
        }else{

System.out.println("Car "+go+": [waiting ("+GLOBAL.numCochesWait[GLOBAL.LEFT]+
") -  go ("+GLOBAL.numCochesGo[GLOBAL.LEFT]+
")] RIGHT [waiting ("+GLOBAL.numCochesWait[GLOBAL.RIGHT]+
") -  go ("+GLOBAL.numCochesGo[GLOBAL.RIGHT]+")] release my direction");

          mydirection.release();
        }
      //}

      mutex.release();
     }	
  }
  } // Process	
} // Type

MAIN
{
  Semaforo direction_left = new Semaforo (1);
  Semaforo direction_right = new Semaforo (1);
  Semaforo mutex = new Semaforo(1);

  Coche coches[] = new Coche [GLOBAL.MAXHILOS];
  for (int i=0;i<GLOBAL.MAXHILOS; i++) {
    int direction = i;//generarAleatorio(2);
System.out.println("generate from: "+direction);
   if(direction  == GLOBAL.LEFT){
     coches[i] = new Process Coche(direction, direction_left, direction_right, mutex);
    }else{
     coches[i] = new Process Coche(direction, direction_right, direction_left, mutex);
    }
  }
}
