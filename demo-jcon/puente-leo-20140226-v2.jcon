GLOBAL{
 int LEFT = 0;
 int RIGHT = 1;
 int numCochesGoLeft = 0;
 int numCochesGoRight = 0;
 int numCochesWaitLeft = 0;
 int numCochesWaitRight = 0;
// int direction;
 int MAXHILOS = 2;
}

TYPE {
  Process CocheLeft {
    Semaforo otherdirection, mydirection, mutex;
    int direction, inversedirection;
   String go;
	
  public CocheLeft(Semaforo _mydirection, Semaforo _otherdirection, Semaforo _mutex) {
    direction = 0;
    go = "LEFT";
/*    if(direction == GLOBAL.LEFT){
       inversedirection  = GLOBAL.RIGHT;
      go = "LEFT";
    }else{
      inversedirection = GLOBAL.LEFT;
      go = "RIGHT";
    }*/
    mydirection = _mydirection;
    otherdirection = _otherdirection;
    mutex = _mutex;
  }

  public void run() {
    while (true) {		
      mutex.acquire();

System.out.println("Car "+go+": LEFT [waiting ("+GLOBAL.numCochesWaitLeft+
") -  go ("+GLOBAL.numCochesGoLeft+
")] RIGHT [waiting ("+GLOBAL.numCochesWaitRight+
") -  go ("+GLOBAL.numCochesGoRight+")] checkin");

      // if  someone go from other direction or someone wait in other direction
      if(GLOBAL.numCochesGoRight > 0 || GLOBAL.numCochesWaitRight > 0){

System.out.println("Car "+go+": LEFT [waiting ("+GLOBAL.numCochesWaitLeft+
") -  go ("+GLOBAL.numCochesGoLeft+
")] RIGHT [waiting ("+GLOBAL.numCochesWaitRight+
") -  go ("+GLOBAL.numCochesGoRight+")] wait++");

        // sign me on waiting list
        GLOBAL.numCochesWaitLeft++;
        // Free mutex
        mutex.release();
System.out.println("Release mutex, wait mydirection "+direction);
        // Just wait!
        mydirection.wait();
System.out.println("Release mydirection, wait mutex"+direction);
        // Get mutex
        mutex.acquire();
System.out.println("Acquired mutex");
        // go out from the waiting list
        GLOBAL.numCochesWaitLeft--;

System.out.println("Car "+go+": LEFT [waiting ("+GLOBAL.numCochesWaitRight+
") -  go ("+GLOBAL.numCochesGoLeft+
")] RIGHT [waiting ("+GLOBAL.numCochesWaitRight+
") -  go ("+GLOBAL.numCochesGoRight+")] wait--");

      }
      // sign me on go list
      GLOBAL.numCochesGoLeft++;

System.out.println("Car "+go+": LEFT [waiting ("+GLOBAL.numCochesWaitLeft+
") -  go ("+GLOBAL.numCochesGoLeft+")] RIGHT [waiting ("+
GLOBAL.numCochesWaitRight+") -  go ("+
GLOBAL.numCochesGoRight+")] go++");

      // Free mutex
      mutex.release();

      // I can pass  
      System.out.println("Car pass from: LEFT..." );
       
      mutex.acquire();
System.out.println("Car pass from: LEFT... ");//+ GLOBAL.numCochesGoLeft);
      // I passed! I'm on the other side of the bridge...
      //GLOBAL.numCochesGoLeft--;
System.out.println("Car passed from: LEFT... ");//+ GLOBAL.numCochesGoLeft);

System.out.println("Car "+go+":LEFT [waiting ("+GLOBAL.numCochesWaitLeft+
") -  go ("+GLOBAL.numCochesGoLeft+
")] RIGHT [waiting ("+GLOBAL.numCochesWaitRight+
") -  go ("+GLOBAL.numCochesGoRight+")] go--");

      // Wake up a waiting car
      //if(GLOBAL.numCochesGo[direction] == 0){
      	
        if(GLOBAL.numCochesWaitRight > 0){

System.out.println("Car "+go+": [waiting ("+GLOBAL.numCochesWaitLeft+
") -  go ("+GLOBAL.numCochesGoLeft+
")] RIGHT [waiting ("+GLOBAL.numCochesWaitRight+
") -  go ("+GLOBAL.numCochesGoRight+")] release other direction");

          // change direction
          otherdirection.release();
        }else{

System.out.println("Car "+go+": [waiting ("+GLOBAL.numCochesWaitLeft+
") -  go ("+GLOBAL.numCochesGoLeft+
")] RIGHT [waiting ("+GLOBAL.numCochesWaitRight+
") -  go ("+GLOBAL.numCochesGoRight+")] release my direction");

          mydirection.release();
        }
      //}

      mutex.release();
     }	
  }
  } // Process	
	
  Process CocheRight {
    Semaforo otherdirection, mydirection, mutex;
    int direction, inversedirection;
   String go;
	
  public CocheRight(Semaforo _mydirection, Semaforo _otherdirection, Semaforo _mutex) {
    direction = 1;
    go = "RIGHT";
/*    if(direction == GLOBAL.LEFT){
       inversedirection  = GLOBAL.RIGHT;
      go = "LEFT";
    }else{
      inversedirection = GLOBAL.LEFT;
      go = "RIGHT";
    }*/
    mydirection = _mydirection;
    otherdirection = _otherdirection;
    mutex = _mutex;
  }

  public void run() {
    while (true) {		
      mutex.acquire();

System.out.println("Car "+go+": LEFT [waiting ("+GLOBAL.numCochesWaitLeft+
") -  go ("+GLOBAL.numCochesGoLeft+
")] RIGHT [waiting ("+GLOBAL.numCochesWaitRight+
") -  go ("+GLOBAL.numCochesGoRight+")] checkin");

      // if  someone go from other direction or someone wait in other direction
      if(GLOBAL.numCochesGoLeft > 0 || GLOBAL.numCochesWaitLeft > 0){

System.out.println("Car "+go+": LEFT [waiting ("+GLOBAL.numCochesWaitLeft+
") -  go ("+GLOBAL.numCochesGoLeft+
")] RIGHT [waiting ("+GLOBAL.numCochesWaitRight+
") -  go ("+GLOBAL.numCochesGoRight+")] wait++");

        // sign me on waiting list
        GLOBAL.numCochesWaitRight++;
        // Free mutex
        mutex.release();
System.out.println("Release mutex, wait mydirection "+direction);
        // Just wait!
        mydirection.wait();
System.out.println("Release mydirection, wait mutex"+direction);
        // Get mutex
        mutex.acquire();
System.out.println("Acquired mutex");
        // go out from the waiting list
        GLOBAL.numCochesWaitRight--;

System.out.println("Car "+go+": LEFT [waiting ("+GLOBAL.numCochesWaitLeft+
") -  go ("+GLOBAL.numCochesGoLeft+
")] RIGHT [waiting ("+GLOBAL.numCochesWaitRight+
") -  go ("+GLOBAL.numCochesGoRight+")] wait--");

      }
      // sign me on go list
      GLOBAL.numCochesGoRight++;

System.out.println("Car "+go+": LEFT [waiting ("+GLOBAL.numCochesWaitLeft+
") -  go ("+GLOBAL.numCochesGoLeft+")] RIGHT [waiting ("+
GLOBAL.numCochesWaitRight+") -  go ("+
GLOBAL.numCochesGoRight+")] go++");

      // Free mutex
      mutex.release();

      // I can pass  
      System.out.println("Car pass from: RIGHT..." );
       
      mutex.acquire();
System.out.println("Car pass from: RIGHT... "+ GLOBAL.numCochesGoRight);
      // I passed! I'm on the other side of the bridge...
      GLOBAL.numCochesGoRight--;
System.out.println("Car passed from: RIGHT... "+ GLOBAL.numCochesGoRight);

System.out.println("Car "+go+":LEFT [waiting ("+GLOBAL.numCochesWaitLeft+
") -  go ("+GLOBAL.numCochesGoLeft+
")] RIGHT [waiting ("+GLOBAL.numCochesWaitRight+
") -  go ("+GLOBAL.numCochesGoRight+")] go--");

      // Wake up a waiting car
      //if(GLOBAL.numCochesGo[direction] == 0){
      	
        if(GLOBAL.numCochesWaitLeft > 0){

System.out.println("Car "+go+": [waiting ("+GLOBAL.numCochesWaitLeft+
") -  go ("+GLOBAL.numCochesGoLeft+
")] RIGHT [waiting ("+GLOBAL.numCochesWaitRight+
") -  go ("+GLOBAL.numCochesGoRight+")] release other direction");

          // change direction
          otherdirection.release();
        }else{

System.out.println("Car "+go+": [waiting ("+GLOBAL.numCochesWaitLeft+
") -  go ("+GLOBAL.numCochesGoLeft+
")] RIGHT [waiting ("+GLOBAL.numCochesWaitRight+
") -  go ("+GLOBAL.numCochesGoRight+")] release my direction");

          mydirection.release();
        }
      //}

      mutex.release();
     }	
  }
  } // Process	
} // Type

MAIN
{
  Semaforo direction_left = new Semaforo (1);
  Semaforo direction_right = new Semaforo (1);
  Semaforo mutex = new Semaforo(1);

  CocheLeft cochesLeft[] = new CocheLeft [GLOBAL.MAXHILOS];
  CocheRight cochesRight[] = new CocheRight [GLOBAL.MAXHILOS];
  for (int i=0;i<GLOBAL.MAXHILOS; i++) {
    int direction = i;//generarAleatorio(2);
System.out.println("generate from: "+direction);
   if(direction  == GLOBAL.LEFT){
     cochesLeft[i] = new Process CocheLeft(direction_left, direction_right, mutex);
    }else{
     cochesRight[i] = new Process CocheRight(direction_right, direction_left, mutex);
    }
  }
}
