GLOBAL{
 int LEFT = 0;
 int RIGHT = 1;
 int cochesGoLx = 0;
 int cochesGoRx = 0;
 int cochesWaitLx = 0;
 int cochesWaitRx = 0;
// int direction;
 int MAXHILOS = 400;
}

TYPE {
  Process CocheLeft {
    Semaforo otherdirection, mydirection, mutex;
	
  public CocheLeft(Semaforo _mydirection, Semaforo _otherdirection, Semaforo _mutex) {
    mydirection = _mydirection;
    mutex = _mutex;
    otherdirection = _otherdirection;
  }

  public void run() {
//    while (true) {		
      mutex.acquire();
      // sign me on waiting list
      GLOBAL.cochesWaitLx++;
      // if there are someone waiting in the other direction
      if(GLOBAL.cochesWaitRx > 0){
        // waikup 
        otherdirection.release();
      }

      mutex.release();
      //wait my turn
      mydirection.acquire();
      mutex.acquire();

      // from the Waiting list
      GLOBAL.cochesWaitLx--;
      // to the Go list
      GLOBAL.cochesGoLx++;

      mutex.release();

      System.out.println("Car pass from: LEFT... ");
            	
      mutex.acquire();
  
      // I passed! I'm on the other side of the bridge...
      GLOBAL.cochesGoLx--;
      // if someone waiting from the other side
      if(GLOBAL.cochesWaitRx > 0){
        // wakeup car from other side
        otherdirection.release();
      }else{
        // wakeup car from my side
        mydirection.release();
      }

      mutex.release();
     }	
  //}
  } // Process	
	
  Process CocheRight {
    Semaforo otherdirection, mydirection, mutex;
   String go;
	
  public CocheRight(Semaforo _mydirection, Semaforo _otherdirection, Semaforo _mutex) {
    mydirection = _mydirection;
    mutex = _mutex;
    otherdirection = _otherdirection;
  }

  public void run() {
   // while (true) {		
      mutex.acquire();
      // sign me on waiting list
      GLOBAL.cochesWaitRx++;

      if(GLOBAL.cochesWaitLx > 0){
        otherdirection.release();
      }

      mutex.release();
      mydirection.acquire();
      mutex.acquire();

      GLOBAL.cochesWaitRx--;
      GLOBAL.cochesGoRx++;

      mutex.release();

      System.out.println("Car pass from: RIGHT... ");
            	
      mutex.acquire();
  
      // I passed! I'm on the other side of the bridge...
      GLOBAL.cochesGoRx--;
      System.out.println("Car passed from: RIGHT... ");
      if(GLOBAL.cochesWaitLx > 0){
        otherdirection.release();
      }else{
        mydirection.release();
      }

      mutex.release();
     }	
  //}
  } // Process	
} // Type

MAIN
{
 GLOBAL.cochesGoLx = 0;
 GLOBAL.cochesGoRx = 0;
 GLOBAL.cochesWaitLx = 0;
 GLOBAL.cochesWaitRx = 0;

  Semaforo direction_left = new Semaforo (0);
  Semaforo direction_right = new Semaforo (0);
  Semaforo mutex = new Semaforo(1);

  CocheLeft cochesLeft[] = new CocheLeft [GLOBAL.MAXHILOS];
  CocheRight cochesRight[] = new CocheRight [GLOBAL.MAXHILOS];
  for (int i=0;i<GLOBAL.MAXHILOS; i++) {
    int direction = generarAleatorio(2);
    if(direction  == GLOBAL.LEFT){
      cochesLeft[i] = new Process CocheLeft(direction_left, direction_right, mutex);
    }else{
     cochesRight[i] = new Process CocheRight(direction_right, direction_left, mutex);
    }
  }
}
